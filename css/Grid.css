/* www.frontendmentor.io */
/* https://css-tricks.com/snippets/css/complete-guide-grid/ */

/*
1. CSS Grid Layout  is a two-dimensional grid-based layout system. 

2. To get started you have to define a container element as a grid with display: grid, set the column and row sizes with grid-template-columns and grid-template-rows, and then place its child elements into the grid with grid-column and grid-row. 

3. Important CSS Grid terminology

  1. Grid Container: The element on which display: grid is applied. It’s the direct parent of all the grid items. In this example container is the grid container.

    <div class="container">
    <div class="item item-1"> </div>
    <div class="item item-2"> </div>
    <div class="item item-3"> </div>
    </div>

  2. Grid Item : The children (i.e. direct descendants) of the grid container. Here the item elements are grid items, but sub-item isn’t.

    <div class="container">
    <div class="item"> </div>
    <div class="item">
    <p class="sub-item"> </p>
    </div>
    <div class="item"> </div>
    </div>

    
  3. Grid Line:The dividing lines that make up the structure of the grid. They can be either vertical (“column grid lines”) or horizontal (“row grid lines”) and reside on either side of a row or column. Here the yellow line is an example of a column grid line.


  4. Grid Cell:The space between two adjacent row and two adjacent column grid lines. It’s a single “unit” of the grid. Here’s the grid cell between row grid lines 1 and 2, and column grid lines 2 and 3.

  5. Grid Area :The total space surrounded by four grid lines.


4. CSS Grid properties

  1.Properties for the Parent (Grid Container)

    1. display:(grid – generates a block-level grid || inline-grid – generates an inline-level grid)

    2. grid-template-columns: (repeat(5, 1fr)...  || 1fr 1fr )

    3. grid-template-rows : (repeat(5, 1fr)...  || 1fr 1fr )

    4. grid-template-areas(will learn in future)

    5. grid-template: (A shorthand for setting grid-template-rows, grid-template-columns, and grid-template-areas in a single declaration.)

      grid-template: none | <grid-template-rows> / <grid-template-columns>;


    6. column-gap
    7. row-gap
    8. gap: (shorthand for row-gap and column-gap)

      gap: <grid-row-gap> <grid-column-gap>;





    9. justify-items:Aligns grid items along the inline (row) axis.This value applies to all grid items inside the container.

      justify-items:(start || end || center || stretch)

      This behavior can also be set on individual grid items via the justify-self property.

    10. align-items: Aligns grid items along the block (column) axis.This value applies to all grid items inside the container.

      justify-items:(start || end || center || stretch)

      This behavior can also be set on individual grid items via the align-self property.
    
    
    11. place-items : place-items sets both the align-items and justify-items properties in a single declaration.




    12. justify-content:

      justify-content: start | end | center | stretch | space-around | space-between | space-evenly;    

    13. align-content:
    
      align-content: start | end | center | stretch | space-around | space-between | space-evenly;    

     
    14. place-content: place-content sets both the align-content and justify-content properties in a single declaration.


    15. grid-auto-columns
    16. grid-auto-rows
    17. grid-auto-flow
    18. grid



5. Properties for the Children (Grid Items)

  1. grid-column-start
  2. grid-column-end
  3. grid-row-start
  4. grid-row-end
  5 .grid-column:

    grid-column: <start-line> / <end-line> | <start-line> / span <value>;

  6. grid-row:
    grid-row: <start-line> / <end-line> | <start-line> / span <value>;


  7.grid-area(in future)

  8.justify-self: 
    
  justify-self: start | end | center | stretch;

  9.align-self: 
    align-self: start | end | center | stretch;

  10.place-self : place-self sets both the align-self and justify-self properties in a single declaration.

*/

* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

body {
  font-family: Arial, Helvetica, sans-serif;
  font-size: 1.5rem;
  line-height: 1.6;
}
.container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 5%;
  max-width: 80%;
  margin: 10%;
  justify-items: stretch;
  align-items: stretch;
}

.item {
  margin: 5%;
  padding: 5%;
  background-color: steelblue;
  color: #fff;
  border: skyblue 5px solid;

  overflow: hidden;
  text-overflow: ellipsis;
  display: flex;
  justify-content: center;
  align-items: center;
}

.item:nth-child(1) {
  grid-column: 1/3;
  grid-row: 1/3;
}

.item:nth-child(3) {
  grid-row: 2/4;
  align-self: center;
}

.item:nth-child(8) {
  grid-row: 4/6;
}
